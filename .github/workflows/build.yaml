name: Build

on:
  pull_request:
  push:

permissions:
  contents: read

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            uploaddiff: 1
            preset: windows-ci
          # - os: ubuntu-20.04
          #   preset: linux-ci
          # - os: macos-12
          #   preset: macos-ci
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    env:
      VCPKG_ROOT:
      DiffFile: ${{ github.workspace }}/out/format.diff
    steps:
      - uses: actions/checkout@v3
      - name: 'Format C++'
        if: matrix.uploaddiff
        shell: pwsh
        run: ./azure-pipelines/Format-CxxCode.ps1
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: 'npm'
          cache-dependency-path: vcpkg-artifacts/package-lock.json
      - uses: lukka/get-cmake@v3.26.3
        with:
          cmakeVersion: 3.22.1 # ubuntu 22.04
          ninjaVersion: 1.11.1
      - name: Configure and Build
        if: matrix.os != 'windows-2022'
        run: |
          cmake --preset ${{ matrix.preset }}
          cmake --build --preset ${{ matrix.preset }} -- -k0
      - name: Configure and Build (Windows)
        if: matrix.os == 'windows-2022'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\vsdevcmd.bat" -arch=amd64 -host_arch=amd64
          IF %ERRORLEVEL% NEQ 0 exit /B %ERRORLEVEL%
          cl /Bv
          set CXX=cl
          set CC=cl
          cmake --preset ${{ matrix.preset }}
          IF %ERRORLEVEL% NEQ 0 exit /B %ERRORLEVEL%
          cmake --build --preset ${{ matrix.preset }} -- -k0
          IF %ERRORLEVEL% NEQ 0 exit /B %ERRORLEVEL%
      - name: Regenerate Message Map
        if: matrix.uploaddiff
        run: cmake --build --preset ${{ matrix.preset }} --target generate-message-map
      - name: Create Diff
        if: matrix.uploaddiff
        id: diff
        shell: pwsh
        run: |
          git add -u
          git restore --staged vcpkg-artifacts/.npmrc
          git diff --cached --stat
          if ($LASTEXITCODE -ne 0) {
            git config user.name $(git log -1 --pretty=format:'%an')
            git config user.email $(git log -1 --pretty=format:'%ae')
            git commit -m "Format and regenerate messages"
            git format-patch HEAD~ --output=$env:DiffFile
            echo "modified=true" >> $GITHUB_OUTPUT
            echo "::group::Diff"
            get-content $env:DiffFile
            echo "::endgroup::"
            echo "::error::You must reformat the sources or regenerate the message map. See the format.patch artifact for more information."
            echo "One-liner to apply and push the patch from the root of your vcpkg-tool repo:"
            echo "gh run -R ${{ github.repository }} download ${{ github.run_id }} -n format.patch && git am format.patch && rm format.patch && git push"
          }
      - name: Publish Format and Messages File Diff
        uses: actions/upload-artifact@v3
        if: matrix.uploaddiff && steps.diff.outputs.modified == 'true'
        with:
          name: 'format.patch'
          path: ${{ env.DiffFile }}
      # - name: Run vcpkg unit tests
      #   run: ctest --preset ${{ matrix.preset }}
      # - name: Run vcpkg-artifacts unit tests
      #   run: |
      #     cd out/build/${{ matrix.preset }}/vcpkg-artifacts
      #     node node_modules/mocha/bin/mocha --config mocha-config.yaml
      # - name: Get microsoft/vcpkg pinned sha into VCPKG_SHA
      #   id: vcpkg_sha
      #   shell: pwsh
      #   run: |
      #     "VCPKG_SHA="+(Get-Content vcpkg-init/vcpkg-scripts-sha.txt -Raw).Trim() >> $env:GITHUB_OUTPUT
      # - name: Checkout microsoft/vcpkg for end-to-end tests
      #   uses: actions/checkout@v3
      #   with:
      #     fetch-depth: 0
      #     path: ${{ github.workspace }}/vcpkg-root
      #     repository: microsoft/vcpkg
      #     ref: ${{ steps.vcpkg_sha.outputs.VCPKG_SHA }}
      # - name: Run vcpkg end-to-end tests
      #   shell: pwsh
      #   run: |
      #     cd out/build/${{ matrix.preset }}
      #     ${{ github.workspace }}/azure-pipelines/end-to-end-tests.ps1 -RunArtifactsTests
      #   env:
      #     VCPKG_ROOT: ${{ github.workspace }}/vcpkg-root
